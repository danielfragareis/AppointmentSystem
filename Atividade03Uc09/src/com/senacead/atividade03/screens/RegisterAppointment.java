/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.senacead.atividade03.screens;

import com.senacead.atividade03.model.Appointment;
import com.senacead.atividade03.model.AppointmentList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author danie
 */
public class RegisterAppointment extends javax.swing.JFrame {
    List<Appointment> fullList = AppointmentList.listAll();
    
   
    /**
     * Creates new form RegisterAppointment
     */
    public RegisterAppointment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        cpfField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        appointmentDateField = new javax.swing.JTextField();
        nameLbl = new javax.swing.JLabel();
        phoneLbl = new javax.swing.JLabel();
        cpfLbl = new javax.swing.JLabel();
        appointmentDateLbn = new javax.swing.JLabel();
        registerBtn = new javax.swing.JButton();
        isPacientRdBtn = new javax.swing.JRadioButton();
        returnBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Cadastrar consulta");
        jTextField1.setFocusable(false);

        cpfField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpfFieldActionPerformed(evt);
            }
        });

        phoneField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phoneFieldMouseClicked(evt);
            }
        });

        nameLbl.setText("Nome do(a) paciente:");

        phoneLbl.setText("Telefone:");

        cpfLbl.setText("Cpf:");

        appointmentDateLbn.setText("Data da consulta:");

        registerBtn.setText("Cadastrar");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        isPacientRdBtn.setText("Já é paciente?");

        returnBtn.setText("Voltar");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(phoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cpfLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appointmentDateLbn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(isPacientRdBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(registerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(appointmentDateField)
                    .addComponent(phoneField)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(cpfField))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpfField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpfLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appointmentDateLbn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isPacientRdBtn)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(registerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private boolean emptyFields(){
    
        boolean empty = true; 

         if(nameField.getText().trim().isEmpty()){
             JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Nome não pode ser vazio.");
         } else if(cpfField.getText().trim().isEmpty()){
              JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Cpf não pode ser vazio.");
         } else if(phoneField.getText().trim().isEmpty()){
              JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Telefone não pode ser vazio.");
         } else if(appointmentDateField.getText().trim().isEmpty()){
             JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Data não pode ser vazio.");
         }else{
             empty = false;
         }

         return empty;
    }

    private Appointment getAppointmentRegister(){
        Appointment appointment = new Appointment();
       
        appointment.setPacientName(nameField.getText());
        appointment.setPacientCpf(cpfField.getText());
        appointment.setPacientPhone(phoneField.getText());
        appointment.setAppointmentDate(appointmentDateField.getText());
        appointment.setIsPacient(isPacientRdBtn.isSelected());
        if(isPacientRdBtn.isSelected()){
            appointment.setAppointmentCompleted("Sim");
        }else{
            appointment.setAppointmentCompleted("Não");
        }
        

        return appointment;
     }
    
    private void insertAppointment(Appointment appointment){
        
        fullList.add(appointment);
        StartScreen table = new StartScreen();
        table.setVisible(true);
        JOptionPane.showMessageDialog(null, "Consulta cadastrada com sucesso");
    }
    
    private boolean isPhoneValid(String phoneNumber){
        if(!phoneNumber.matches("^\\d{2}\\d{4,5}\\d{4}$")){
            JOptionPane.showMessageDialog(rootPane, "Telefone com formato inválido"
                    + "\nDeve incluir SOMENTE números, código de área e número com 9 dígitos"
                    + "\nExemplo: 51996601146"); 
            return false;
        } else {
            return true;
        }
    }
    
    int[] factor = {11, 10, 9, 8, 7, 6, 5, 4, 3, 2};
    
    private int calculateDigit(String stringCpf, int[] factor) {
        int sum = 0;
        for (int i = stringCpf.length()-1, digit; i >= 0; i-- ) {
           digit = Integer.parseInt(stringCpf.substring(i, i+1));
           sum += digit * factor[factor.length-stringCpf.length()+i];
        }
        sum = 11 - sum % 11;
        return (sum > 9)  ? 0 : sum;
    }
    
    private boolean isCpfValid(String stringCpf) {
        if (!stringCpf.matches("^[0-9]+$") || (stringCpf.length()!= 11) 
            || stringCpf.equals("00000000000") || stringCpf.equals("11111111111")      
            || stringCpf.equals("22222222222") || stringCpf.equals("33333333333")
            || stringCpf.equals("44444444444") || stringCpf.equals("55555555555")
            || stringCpf.equals("66666666666") || stringCpf.equals("77777777777")
            || stringCpf.equals("88888888888") || stringCpf.equals("99999999999")){
            
            JOptionPane.showMessageDialog(rootPane, "Cpf inválido"
                    + "\nO CPF deve conter somente números"
                    + "\nExemplo: 33015059459");
            return false;
        }else{
            Integer digit1 = calculateDigit(stringCpf.substring(0,9), factor);
            Integer digit2 = calculateDigit(stringCpf.substring(0,9) + digit1, factor);
            
            if(stringCpf.equals(stringCpf.substring(0,9) + digit1.toString() + digit2.toString())){
                return true;
            } else {
                JOptionPane.showMessageDialog(rootPane, "Cpf inválido"
                        + "\nO CPF deve conter somente números"
                        + "\nExemplo: 33015059459");
                return false;
            }
        }
   }
    
    private boolean isDateValid(String strDate) {
        strDate = strDate.replaceAll("-", "/");
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        try {
            LocalDate.parse(strDate, dateTimeFormatter);
            return true;
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(rootPane, "Data inválida"
                    + "\nAs datas são aceitas neste formato:"
                    + "\n29/09/2023 OU"
                    + "\n29-09-2023"
                    + "\n" + e.getMessage());
           return false;
        } 
    }
    
    private void cpfFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpfFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpfFieldActionPerformed

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        if(!emptyFields() && isCpfValid(cpfField.getText()) 
           && isDateValid(appointmentDateField.getText()) 
           && isPhoneValid(phoneField.getText())){
            insertAppointment(getAppointmentRegister());
        }
    }//GEN-LAST:event_registerBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        JOptionPane.showMessageDialog(null, "Os dados inseridos não serão salvos");
        dispose();
    }//GEN-LAST:event_returnBtnActionPerformed

    private void phoneFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneFieldMouseClicked
        JOptionPane.showMessageDialog(rootPane, "Formato aceito para o campo TELEFONE: 51996601146"
                + "\nFormato aceito para o campo CPF: 33015059459"
                + "\nFormato aceito para o campo DATA: 29/09/2023 OU 29-09-2023");
    }//GEN-LAST:event_phoneFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appointmentDateField;
    private javax.swing.JLabel appointmentDateLbn;
    private javax.swing.JTextField cpfField;
    private javax.swing.JLabel cpfLbl;
    private javax.swing.JRadioButton isPacientRdBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLbl;
    private javax.swing.JButton registerBtn;
    private javax.swing.JButton returnBtn;
    // End of variables declaration//GEN-END:variables
}
